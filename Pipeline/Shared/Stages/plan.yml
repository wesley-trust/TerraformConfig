stages:
- stage: Plan
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: Validate
  jobs:
  - job: Evaluate
    continueOnError: false
    steps:
    
    # Terraform Install and initialise
    - template: ../Steps/bootstrap.yml

    # Create artifact directory
    - bash: |
          mkdir -p $(Pipeline.Workspace)/Output
      name: 'Directory'
      displayName: 'Create artifact directory'
    
    # Terraform Plan
    - task: TerraformCLI@0
      name: 'Plan'
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(Service)/'
        environmentServiceName: '$(backendServiceArm)'
        publishPlanResults: 'apply_terraform.tfplan'
        commandOptions: '-out=$(Pipeline.Workspace)/Output/apply_terraform.tfplan -detailed-exitcode'
    
    # Set pipeline output variable if there are changes
    - bash: |
        if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] ; then
          echo "##vso[task.setvariable variable=ShouldRun;isOutput=true]true"
          fi
      name: 'Variable'
      displayName: 'Set variable'
    
    # Publish artifact
    - task: PublishPipelineArtifact@1
      displayName: 'Publish plan artifact'
      inputs:
        targetPath: '$(Pipeline.Workspace)/Output'
        artifact: 'Evaluate'
        publishLocation: 'pipeline'