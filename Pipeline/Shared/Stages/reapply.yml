stages:
- stage: ReApply
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: RePlan
  condition: and(succeeded('RePlan'), eq(dependencies.RePlan.outputs['ReEvaluate.Variable.ShouldRun'], 'true'))
  jobs:
  - deployment: ReDeploy
    continueOnError: true
    environment: '$(Environment-ReApply)'
    strategy:
     runOnce:
       deploy:
        steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformCLI@0
            displayName: 'Terraform Initialise'
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(Service)/'
              backendType: 'azurerm'
              backendServiceArm: '$(backendServiceArm)'
              ensureBackend: true
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'
          - task: TerraformCLI@0
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(Service)/'
              environmentServiceName: '$(backendServiceArm)'
              commandOptions: '$(Pipeline.Workspace)/ReEvaluate/reapply_terraform.tfplan'